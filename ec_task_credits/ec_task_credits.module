<?php
/*
 * THIS FIELD HAS ALSO BEEN MANUALLY ADDED TO:
 * profiles/openlucius/themes/openlucius/node--ol-todo.tpl
 */


/**
 *	Implements hook_node_view().
 **/
function ec_task_credits_node_view($node, $view_mode, $langcode) {

	if ($node->type == 'ol_todo') {
		//this module will only work if the proper todo_list field is present
		if (isset($node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'])) {
			//add css and js
			$path = drupal_get_path('module', 'ec_task_credits');
			drupal_add_css ("$path/css/task_credits.css");

			$jspath = drupal_get_path('module', 'ec_task_credits');
			drupal_add_js ("$jspath/js/ec_task_credits.js");

			$output = theme('vocab_list', array(
				'task_nid' => $node->nid,
				'task_list_nid' => $node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'],
				)
			);
			//returns the output from preprocess_vocab_list
			$node->content['vocab_list_container'] = array(
				'#markup' => $output,
			);

		} else {
			watchdog('ec_task_credits', 'The ec_task_credits module cannot run because the field field_todo_list_reference is not present.');
		}

	}
}


/**
 *	Implements hook_menu().
 **/
function ec_task_credits_menu() {
	$items = [];
	$items['angular2'] = [
		'access callback' => TRUE,
		'page callback' => 'ec_task_credits_angular_callback',
	];
	$items['download/task-credits/%'] = [
		'page callback' => 'ec_task_credits_download_images',
		'type' => MENU_CALLBACK,
		'page arguments' => array(2), //the node of the task (ol_todo)
		'access arguments' => array('access content'),
		'delivery callback' => 'ec_task_credits_download_images_ajax',
	];
	return $items;
}
function clean($string) {
	$string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.

	return preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
}
/**
 *	Download Task Credits menu callback.
 **/
function ec_task_credits_download_images($task_nid) {
	if (!empty($task_nid)) {
		$task = node_load($task_nid);
		$project_nid = ec_app_ec_return_project($task_nid, 'projects', 'field_project_tasks');
		$project = node_load($project_nid);
		$project_title = $project->title;
		print drupal_get_path_alias('node/'.$project_nid);
		$file_path = "sites/default/files/images/".$task_nid;

		//if the file path exists, build an array of images from it.
		if (file_prepare_directory($file_path)) {
			$file_array = array();
			$file_array['file_path'] = $file_path;
			$png = file_scan_directory($file_path, '/.*.png$/i');
			$jpg = file_scan_directory($file_path, '/.*.jpg$/i');
			$bmp = file_scan_directory($file_path, '/.*.bmp$/i');

			$file_array[0] = array_merge($png, $jpg, $bmp);
			$url_array = array();

			foreach ($file_array[0] as $key => $uri) {
				array_push($url_array, file_create_url($key));
			}
//			downloadAllImages();
//			$files_to_zip = array(
//				0 => array(
//					'file_path' => 'sites/default/files/images/29523/img.png',
//					'file_name' => 'img.png'),
//				1 => array(
//					'file_path' => 'sites/default/files/images/29523/video.png',
//					'file_name' => 'video.png',
//				),
//			);
//if true, good; if false, zip creation failed
			$result = create_zip($file_array,'sites/default/files/images/29523/my-archive.zip');

			$string="done";
		} else {
			watchdog('ec_task_credits', 'Error in downloading images. There is no sites/default/images folder. Also, images should be saved inside of
			a folder of their respective task node id. This is done with the file paths module. Example: sites/default/images/29523/image.png');
			$string = 'file path does not exist';
		}
	} else {
		$string = 'No task node id was given. Images could not be found';
	}
	return $string;
}

/**
 *	Download Task Credits ajax delivery callback.
 **/
function ec_task_credits_download_images_ajax($response) {
	//dpm($response);
//	print '<pre>';
print_r($response);
//	print '</pre>';
}
function direct_download($filepath, $filename) {

	$file = $filepath;

	header('Content-Description: File Transfer');
	header('Content-Type: application/octet-stream');
	header('Content-Disposition: attachment; filename='.basename($filename));
	header('Expires: 0');
	header('Cache-Control: must-revalidate');
	header('Pragma: public');
	header('Content-Length: ' . filesize($file));
	set_time_limit(0);
	ob_clean();
	flush();
	readfile($file);
	print $filename;
	return true;

}
function downloadAllImages() {
	$files = array(
		'public://images/29523/img.png',
		'public://images/29523/video.png'
	);
	print_r($files);
	print "test";

	$destination = 'sites/default/files/images/29523/my.zip';
	$z = new ZipArchive();
	$z->open('sites/default/files/images/29523/my.zip',ZIPARCHIVE::CREATE);
	$z->addFile('sites/default/files/images/29523/video.png', 'video.png');
	$z->close();

//	if($z->open($destination,$overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) !== true) {
//		return false;
//	}
//	//add the files
//	foreach($files as $file) {
//		$z->addFile($file,$file);
//	}

//	$zipname = 'logs.zip';
//	$zip = new ZipArchive;
//	$zip->open('sites/default/images/29523/my.zip', ZipArchive::CREATE);
//	foreach ($files as $file) {
//		$zip->addFile($file);
//	}
//	$zip->close();
//	return true;

}

/* creates a compressed zip file */
function create_zip($files = array(),$destination = '') {

	$valid_files = array();
	foreach($files as $file) {
		//make sure the file exists
		if(file_exists($file['file_path'])) {
			$valid_files[] = $file;
		}
	}

	//if we have good files...
	if(count($valid_files)) {
		//create the archive
		$zip = new ZipArchive();

		//if the zip file already exists, then overwrite it, else create it
		if(is_file($destination)) {
			print '</br> OVERWROTE IT </br>';
			$zip->open($destination, ZIPARCHIVE::OVERWRITE);
		} else {
			print '</br> CREATE IT </br>';
			$zip->open($destination, ZIPARCHIVE::CREATE);
		}

		//add the files
		foreach($valid_files as $file) {
			print '</br>'.'adding file to zip '. $file['file_name'].'</br>';
			$zip->addFile($file['file_path'],$file['file_name']);
		}
		$zip->close();

		return file_exists($destination);
	} else {
		return false;
	}
}

function zipFilesAndDownload($file_names,$archive_file_name,$file_path) {
	$zip = new ZipArchive();
	//create the file and throw the error if unsuccessful
	if ($zip->open($file_path.'/'.$archive_file_name, ZIPARCHIVE::CREATE )!==TRUE) {
		exit("cannot open <$archive_file_name>\n");
	}

	$newFileName = '/var/www/ecteam.net/sites/default/files/images/29523/test.txt';

	if ( ! is_writable(dirname($newFileName))) {

		echo dirname($newFileName) . ' must writable!!!';
	} else {
		fopen("/var/www/ecteam.net/sites/default/files/images/29523/test2.zip", "w");
		// blah blah blah
	}
	//add each files of $file_name array to archive
	foreach($file_names as $files) {
		if(!empty($files)) {
			$file=str_replace($file_path.'/',"",$files);
//			print $file;
//			print '</br>';
			$zip->addFile($files, $file);
		}
	}
	$zip->close();
	echo $file_path.'/'.$archive_file_name;
}



if($_GET['documents']) {
	$documents=explode(",",$_GET['documents']);

	$file_names=$documents;
	$archive_file_name='zipped-'.time().'.zip';
	$file_path=$_SERVER['DOCUMENT_ROOT'].'/';
	zipFilesAndDownload($file_names,$archive_file_name,$file_path);
}

/**
 *	Angular menu callback.
 **/
function ec_task_credits_angular_callback() {
	$build['content'] = [
		'#theme' => [
			'angular_component',
		],
	];
	return $build;
}

/**
 *	Implements hook_theme().
 **/
function ec_task_credits_theme($existing, $type, $theme, $path) {
	return [
		'angular_component' => [
			'template' => 'angular-component',
			'variables' => array(),
			'path' => drupal_get_path('module', 'ec_task_credits') . '/theme',
		],
		'vocab_list' => [
			'template' => 'vocab-list',
			'variables' => array(),
			'path' => drupal_get_path('module', 'ec_task_credits') . '/theme',
		],
	];
}

/**
 * Callback for the vocab_list template. Adds fields
 */
function ec_task_credits_preprocess_vocab_list(&$vars) {
	// Add vocabulary output to template file
	// build a form send it to the template file
	$task_list = node_load($vars['task_list_nid']);
	$node = node_load($vars['task_nid']);
	global $base_url;
	//create link to download all images
	$vars['download_all'] = '<h3><a href="'.$base_url.'/download/task-credits/'.$vars['task_nid'].'">Download all images</a></h3>';
//	dpm($node);


	//build vocab credit list
	if ($task_list->title == 'Site Visits') {
		switch($node->title) {
			case 'Insulation':
				$vocab_insulation = taxonomy_vocabulary_machine_name_load('credit_list_insulation');
				$terms_insulation = entity_load('taxonomy_term', FALSE, array('vid' => $vocab_insulation->vid));
				$vars['terms'] = $terms_insulation;
				break;

			case 'Framing':
				$vocab_framing = taxonomy_vocabulary_machine_name_load('credit_list_framing');
				$terms_framing = entity_load('taxonomy_term', FALSE, array('vid' => $vocab_framing->vid));
				$vars['terms'] = $terms_framing;
				break;

			case 'Final + Blower Door':
				$vars['terms'] = '';
				break;
			default:
				 $vars['terms'] = '';
				break;

		}
		//build the term fields
		//for each term, create a form dynamically
		if (!empty($vars['terms'])) {
			$i=0;
			foreach ($vars['terms'] as $tid => $term){
				//arguments go to $form_state['build_info']['args']
				$vars['credit_form'][] = drupal_get_form('ec_task_credits_credit_form', $term->tid, $term->name, $node->nid);
				$i++;
			}
		}


	}
}

/**
 * Check to see if a task credit exists referencing that tid for that nid
 * @param $task_nid
 * @param $term_id
 * @return mixed
 */
function check_credit($task_nid, $term_id) {

	$sql = "SELECT field_task_credit_term_reference_value term_id, tr.entity_id task_credit_nid FROM {field_data_field_task_credits} tc ";
	$sql .= "join {field_data_field_task_credit_term_reference} tr on tr.entity_id = tc.field_task_credits_target_id ";
	$sql .= "where tc.entity_id = ".$task_nid;
	$sql .= " and field_task_credit_term_reference_value = ".$term_id;

	$query = db_query($sql);
	$result = $query->fetchAll();

	if (isset($result[0])) {
		return $result;
	} else {
		return null;
	}
}

/**
 *	Custom Credit form.
 **/
function ec_task_credits_credit_form($form, &$form_state, $term_id, $term_name, $task_node) {
	//the task nid is also in $form_state['build_info']['args'][2]);
	if (!empty($term_id) && !empty($task_node)) {
		//check to see if any of these terms have already been referenced
		$credit_exists = check_credit($task_node, $term_id);
		$task_credit_node = (!empty($credit_exists)) ? node_load($credit_exists[0]->task_credit_nid): null;
		$task_credit_image = (!empty($credit_exists)) ? $task_credit_node->field_task_credit_image[LANGUAGE_NONE][0]['fid']: null;
		$task_credit_nid = (!empty($credit_exists)) ? $credit_exists[0]->task_credit_nid: null;
		$default_comment = (!empty($credit_exists)) ? $task_credit_node->body[LANGUAGE_NONE][0]['value'] : null;
		$default_image_fid = (!empty($credit_exists)) ? $task_credit_node->field_task_credit_image[LANGUAGE_NONE][0]['fid'] : null;

		//begin form
		$form['#id'] = 'ec_task_credits_credit_form_'.$term_id;
		$form['#base'] = 'ec_task_credits_credit_form';
		$form['#attributes']['class'][] = 'ec-task-credits-credit-form-class';

		//if the credit exists already this value will trigger an update rather than a new new
		$form_state['credit_exists'] = (!empty($credit_exists)) ? true: false;
		$form_state['credit_nid'] = (!empty($credit_exists)) ? $task_credit_nid: null;

		//list the term body
 		$form['term_field'] = array(
			'#markup' => $term_name,
			'#prefix' => '<div class="term-body">',
			'#suffix' => '</div>',
			'#tid' => $term_id,
		);


		$form['comment_credit'] = array(
			'#type' => 'textarea',
			'#default_value' => $default_comment,
			'#id' => 'comment_credit_'.$term_id,
			'#title' => t('Comment'),
			'#resizable' => false,
			'#attributes' => array(
				'placeholder' => t('Comment'),
			),
		);

		//if it exists and theres an image, then add it to the form
		if (!empty($task_credit_image)) {
			$file = file_load($task_credit_image);
			$image = image_load($file->uri);
			$large_image = image_style_url('large', $image->source);

			$content = array(
				'file' => array(
					'#theme' => 'image_style',
					'#style_name' => 'medium',
					'#path' => $image->source,
					'#width' => $image->info['width'],
					'#height' => $image->info['height'],
				),
			);

			$form['image_display'] = array(
				'#markup' => drupal_render($content),
				'#prefix' => '<div class="credit-image-display" id="image-display-'.$term_id.'"><a href="'.$large_image.'" rel="lightbox[credits]['.$default_comment.']">',
				'#suffix' => '</a></div>',
				'#tid' => $term_id,
			);
		}

		//file image upload
		$form['browse_credit'] = array(
			'#type' => 'managed_file',
			'#size' => 40,
			'#description' => '',
			'#tid' => $term_id,
			'#id' => 'browse_credit_'.$term_id,
			'#default_value' => $default_image_fid,
			'#upload_location' => 'public://images/'.$task_node,
			'#process' => array('file_managed_file_process', 'ec_task_credits_file_managed_file_process'),
		);

		//selector for ajax response to user
		$form['ajax_response'] = array(
			'#markup' => '<div id="task-credit-ajax-response-'.$term_id.'" class="hide-field"></div>',
		);
		$form['submit'] = array(
			'#type' => 'submit',
			'#id' => 'submit_credit_'.$term_id,
			'#title' => t('Save'),
			'#value' => t('Save'),
			'#prefix' => '<div class="submit-credit-btn">',
			'#suffix' => '</div>',
			'#ajax' => array(
				'callback' => 'ec_task_credits_form_ajax_submit',
				'wrapper' => 'ec-task-credit-form-wrapper',
				'method' => 'replace',
				'effect' => 'fade',
			),
		);

	} else {
		$form['none_found'] = array(
			'#markup' => 'No vocab was found',
		);
	}
	return $form;
}

function ec_task_credits_file_managed_file_process($element) {
	//add attributes to launch camera app on iphone
	$element['upload']['#attributes']['accept'] = 'image/*';
	$element['upload']['#attributes']['capture'] = 'camera';
//	$element['remove_button']['#attributes']['data-id'] = $element['#tid'];
//	$element['remove_button']['#attributes']['class'][] = 'remove-image-js';
//	dpm($element);
//I was going to add some ajax commands to the remove button. But doing this broke the remove functionality
//add submit handler for when the "remove" button is clicked
//	$element['remove_button']['#submit'][] = 'ec_task_credits_ajax_remove_submit';
//	$element['remove_button']['#ajax'] = array(
//		'callback' => 'ec_task_credits_ajax_remove_submit',
//		'wrapper' => 'ec_task_credits_ajax_remove_wrapper',
//		'method' => 'replace',
//		'effect' => 'fade',
//	);
	return $element;
}

function ec_task_credits_ajax_remove_submit($form, &$form_state) {
//remove button clicked ajax
//	//arg 0 is the term id
//	if (isset($form_state['build_info']['args'][0])) {
//		$tid = $form_state['build_info']['args'][0];
//		$commands[] = ajax_command_replace('#image-display-'.$tid,'<div class="credit-image-display" id="image-display-'.$tid.'"></div>');
//		$commands[] = ajax_command_alert('test');
//		return array(
//			'#type' => 'ajax',
//			'#commands' => $commands,
//		);
//	}

}

/**
 * @param $form
 * @param $form_state
 * @return string
 */
function ec_task_credits_form_ajax_submit($form, &$form_state) {

	//upload and handle images
	if(!empty($form_state['build_info']['args'])) {
		if (isset($form_state['values']['browse_credit'])) {
			if ($form_state['values']['browse_credit'] == 0){
				//http://www.zyxware.com/articles/5042/solved-how-to-use-managed-file-for-uploading-private-files-with-its-deletion-in-drupal-7
			} else {
				$file = file_load($form_state['values']['browse_credit']);
				$file->status = FILE_STATUS_PERMANENT;
				file_save($file);
			}

		}

		global $user;
		//if the credit existed first then update it. If not, make it new.
		if ($form_state['credit_exists'] == true) {

			$tid = $form_state['build_info']['args'][0];
			//term value $form_state['build_info']['args'][1];
			$body = $form_state['values']['comment_credit'];
			$image = $form_state['values']['browse_credit'];
			$task_nid = $form_state['build_info']['args'][2];
			$credit_nid = $form_state['credit_nid'];

			$title = 'task credit '.date("Y-m-d").'-'.$task_nid.'-'.$tid;

			$node_info = array(
				'title' => $title,
				'task_nid' => $task_nid,
				'image' => $image,
				'tid' => $tid,
				'body' => $body,
				'credit_nid' => $credit_nid,
				'poster' => $user->uid,
			);

			//update an existing task credit if its not new
			$new_credit_nid = ec_task_credits_update_credit_node($node_info);
		} else {

			$tid = $form_state['build_info']['args'][0];
			$body = $form_state['values']['comment_credit'];
			$image = $form_state['values']['browse_credit'];
			$task_nid = $form_state['build_info']['args'][2];

			$title = 'task credit '.date("Y-m-d").'-'.$task_nid.'-'.$tid;

			$node_info = array(
				'title' => $title,
				'task_nid' => $task_nid,
				'tid' => $tid,
				'body' => $body,
				'image' => $image,
				'poster' => $user->uid,
			);

			//create a new task credit node if its new
			$new_credit_nid = ec_task_credits_add_new_node($node_info);
		}

		//load the task node and reference to the new credit node from above
		$task_node = node_load($task_nid);

		//if theres a ref field, populate with the nid you just made
		if (isset($task_node->field_task_credits) && $form_state['credit_exists'] != true) {
			$task_node->field_task_credits[LANGUAGE_NONE][]['target_id'] = $new_credit_nid;
			node_save($task_node);

		}

		//display the image if one was uploaded
		if (!empty($form_state['values']['browse_credit']) && $form_state['values']['browse_credit'] != 0){
			$file = file_load($form_state['values']['browse_credit']);
			$uri = $file->uri;
			$url = file_create_url($uri);
			//ajax command to insert image html
			$commands[] = ajax_command_before('#browse_credit_'.$tid.'-ajax-wrapper','<div id=ajax-credit-image-'.$tid.' class="fadeIn animated credit-image-display"><img src="'.$url.'" width="220px"></div>');
		} elseif ($form_state['values']['browse_credit'] == 0 && isset($form_state['complete form']['image_display'])) {
			//ajax command to remove the image display if remove is clicked and saved
			$commands[] = ajax_command_replace('#image-display-'.$tid,'<div class="credit-image-display" id="image-display-'.$tid.'"></div>');
			$commands[] = ajax_command_replace('#ajax-credit-image-'.$tid,'<div class="credit-image-display" id="image-display-'.$tid.'"></div>');
		}

		//alert user of success
		$commands[] = ajax_command_replace('#task-credit-ajax-response-'.$tid,'<div id=ajax-credit-replace-'.$tid.' class="fadeInDown animated task-credit-complete">Credit Updated!</div>');
		$commands[] = ajax_command_invoke(NULL, 'creditSuccessAnimation', array($tid, 'argument2'));
		return array(
			'#type' => 'ajax',
			'#commands' => $commands,
		);

	} else {
		drupal_set_message('Arguments were not passed to the ajax submit function');
		watchdog('ec_task_credits', 'Arguments were not properly passed to the ajax submit function.');
		return $form;
	}
}

/*
 * hook_forms()
 */
function ec_task_credits_forms($form_id, $args) {

//	$forms['ec_task_credits_credit_form']['callback'] = 'ec_task_credits_credit_form_callback';
//	return $forms;

	// we can't declare a passed parameter, but we want one anyway
	$args = func_get_args();
	$form_id = $args[0][0];

	// base ids for dynamic forms go here
	$dynamic_forms = array(
		'ec_task_credits_credit_form',
		'my_module_beta_form',
	);
	$forms = array();
	foreach ($dynamic_forms as $dynform) {
		if (strpos($form_id, $dynform) === 0) { // === is important! see doc on strpos
			$forms[$form_id] = array(
				'callback' => $dynform,
				// this get passed in before the rest of the args to drupal_get_form
				'callback arguments' => array('testarg'),
			);
		}
	}
	return $forms;
}

/**
 *	Implements hook_form_alter().
 **/
function ec_task_credits_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'ol_todo_node_form') {
		if(isset($form['field_task_credits'])) {
			//$form['field_task_credits']['#attributes']['class'][] = 'hide-field';
		}
	}

}

/**
 * Custom function that creates a new task credit node
 * @return The node id of the newly submitted task credit
 */
function ec_task_credits_add_new_node($node_info){
	$new_credit = null;
	$new_credit = new stdClass();
	$new_credit->title = $node_info['title'];
	$new_credit->body[LANGUAGE_NONE][0]['value'] = $node_info['body'];
	$new_credit->type = 'task_credits';
	$new_credit->language = LANGUAGE_NONE;
	node_object_prepare($new_credit);
	$new_credit->uid = $node_info['poster'];
	$new_credit->status = 1;
	$new_credit->promote = 0;
	$new_credit->comment = 0;
	$new_credit->path['pathauto'] = 1;
	$new_credit->field_task_credit_term_reference[LANGUAGE_NONE][0]['value'] = $node_info['tid'];

	node_submit($new_credit);
	node_save($new_credit);
	return $new_credit->nid;

	//watchdog('ec_app', 'Created new opportunity autotask from autotask nid '.$oatnode->nid);
}

/**
 * Custom function that updates a credit node
 * @return The node id of the updated task credit
 */
function ec_task_credits_update_credit_node($node_info){

	$update_credit = node_load($node_info['credit_nid']);
	$update_credit->title = $node_info['title'];
	$update_credit->body[LANGUAGE_NONE][0]['value'] = $node_info['body'];
	$update_credit->uid = $node_info['poster'];
	$update_credit->field_task_credit_image[LANGUAGE_NONE][0]['fid'] = $node_info['image'];

	node_save($update_credit);
	return $update_credit->nid;

	//watchdog('ec_app', 'Created new opportunity autotask from autotask nid '.$oatnode->nid);
}