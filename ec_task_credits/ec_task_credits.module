<?php
//https://www.alloymagnetic.com/blog/192/angular-2-boilerplate-setup-small-drupal-7-applications

/** Implements hook_node_view().
 *
 **/
function ec_task_credits_node_view($node, $view_mode, $langcode) {
	if ($node->type == 'ol_todo') {
		if (isset($node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'])) {

			$path = drupal_get_path('module', 'ec_task_credits');
			drupal_add_css ("$path/css/task_credits.css");

			$output = theme('vocab_list', array(
				'task_nid' => $node->nid,
				'task_list_nid' => $node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'],
				)
			);
			//returns the output from preprocess_vocab_list
			$node->content['vocab_list_container'] = array(
				'#markup' => $output,
			);
		}

	}
}

function ec_task_credits_preprocess_field(&$variables) {

}

//<-- ANGULAR PROJECT -------------------------------------------------------<
function ec_task_credits_menu() {
	$items = [];
	$items['angular2'] = [
		'access callback' => TRUE,
		'page callback' => 'ec_task_credits_callback',
	];
	return $items;
}

function ec_task_credits_callback() {
	$build['content'] = [
		'#theme' => [
			'angular_component',
		],
	];
	return $build;
}

function ec_task_credits_theme($existing, $type, $theme, $path) {
	return [
		'angular_component' => [
			'template' => 'angular-component',
			'variables' => array(),
			'path' => drupal_get_path('module', 'ec_task_credits') . '/theme',
		],
		'vocab_list' => [
			'template' => 'vocab-list',
			'variables' => array(),
			'path' => drupal_get_path('module', 'ec_task_credits') . '/theme',
		],
	];
}

/**
 * Callback for the vocab_list template. Adds fields
 */
function ec_task_credits_preprocess_vocab_list(&$vars) {
	// Add vocabulary output to template file
	// build a form send it to the template file
	$task_list = node_load($vars['task_list_nid']);
	$node = node_load($vars['task_nid']);
	if ($task_list->title == 'Site Visits') {
		switch($node->title) {
			case 'Insulation':
				$vocab_insulation = taxonomy_vocabulary_machine_name_load('credit_list_insulation');
				$terms_insulation = entity_load('taxonomy_term', FALSE, array('vid' => $vocab_insulation->vid));
				$vars['terms'] = $terms_insulation;
				break;

			case 'Framing':
				$vocab_framing = taxonomy_vocabulary_machine_name_load('credit_list_framing');
				$terms_framing = entity_load('taxonomy_term', FALSE, array('vid' => $vocab_framing->vid));
				$vars['terms'] = $terms_framing;
				break;

			case 'Final + Blower Door':
				$vars['terms'] = '';
				break;
			default:
				 $vars['terms'] = '';
				break;

		}
		//build the term fields
		//for each term, create a $field and an accompanying browse control and textbox
		//then put that array inside a $form array and return the whole thing to the template
		$form = array();
		if (!empty($vars['terms'])) {
			$i=0;
			foreach ($vars['terms'] as $tid => $term){
				$form['term_group_'.$i] = array(
					'term_field' => array(
						'#markup' => $term->name,
						'#tid' => $term->tid,
					),
					'browse_credit' => array(
						'#type' => 'managed_file',
						'#name' => 'browse_credit_'.$term->tid,
						'#value' => t('Browse'),
						'#title' => t('Browse'),
						'#default_value' => variable_get('rate_table_logo', ''),
						'#upload_location' => 'public://files/',
					),
					'comment_credit' => array(
						'#type' => 'textarea',
						'#name' => 'comment_credit'.$term->tid,
						'#title' => t('Comment'),
						'#value' => t('Comment'),
					),
					'submit' => array(
						'#type' => 'submit',
						'#name' => 'comment_credit'.$term->tid,
						'#title' => t('Comment'),
						'#value' => t('Comment'),
					),
				);
				$vars['test_form'][] = drupal_get_form('ec_task_credits_credit_form', $term->tid, $term->name);
				$i++;

			}
//			$vars['test_form'][] = drupal_get_form('ec_task_credits_credit_form', $vars['terms']);
//			if ($wrapper = file_stream_wrapper_get_instance_by_uri('public://')) {
//				$realpath = $wrapper->realpath();
//				$url = $wrapper->getExternalUrl();
//				dpm($realpath);
//				dpm($url);
//			}
			$vars['term_fields'] = $form;

//$result = db_query('SELECT field_last_name_value FROM {field_data_field_last_name} WHERE entity_id = 7273', 2);
//$name1=db_result(db_query(, 2));

		}


	}
//
//	$form = array(
//		$node->content['credit_browse'] = array (
//			'#type' => 'submit',
//			'#name' => 'credit_browse',
//			'#title' => t('My Field'),
//			'#value' => t('Browse'),
//		)
//	);

//	$element['upload'] = array(
//		'#name' => 'files[' . implode('_', $element['#parents']) . ']',
//		'#type' => 'file',
//		'#title' => t('Choose a file'),
//		'#title_display' => 'invisible',
//		'#size' => 22,
//		'#theme_wrappers' => array(),
//		'#weight' => -10,
//	);

}
function ec_task_credits_credit_form_callback() {

}

function ec_task_credits_credit_form_validate($form, &$form_state) {
	dpm($form_state);
	dpm('test!');
	form_set_error('', t('It looks like your badge# is incorrect :('));
}

function ec_task_credits_credit_form_submit($form, &$form_state) {
	dpm('submit handler is running wtf?');
	dpm($form);
	if (isset($form_state['values']['browse_credit'])) {
		$file = file_load($form_state['values']['custom_content_block_image']);

		$file->status = FILE_STATUS_PERMANENT;

		file_save($file);
	}
}

function ec_task_credits_credit_form($form, &$form_state, $term_id, $term_name) {

//	$form['#id'] = 'task_credit_form_'.$
	if (!empty($term_id)) {
		$form_id = '';
		$form['#id'] = 'ec_task_credit_form_'.$term_id;
		$form['#base'] = 'ec_task_credits_credit_form';
		$form['term_group'] = array(
			'term_field' => array(
				'#markup' => $term_name,
				'#tid' => $term_id,
			),
			'browse_credit' => array(
				'#type' => 'managed_file',
				'#name' => 'browse_credit_'.$term_id,
				'#title' => t('Block image'),
				'#size' => 40,
				'#description' => t("Image should be less than 400 pixels wide and in JPG format."),
				'#upload_location' => 'public://'
			),
			'comment_credit' => array(
				'#type' => 'textarea',
				'#name' => 'comment_credit_'.$term_id,
				'#title' => t('Comment'),
				'#value' => t('Comment'),
			),
			'submit' => array(
				'#type' => 'submit',
				'#name' => 'comment_credit_'.$term_id,
				'#title' => t('Save'),
				'#value' => t('Save'),
			),
		);

//		$i=0;
//		foreach ($terms as $tid => $term){
//			$form['term_group_'.$i] = array(
//				'term_field' => array(
//					'#markup' => $term->name,
//					'#tid' => $term->tid,
//				),
//				'browse_credit' => array(
//					'#type' => 'managed_file',
//					'#name' => 'browse_credit_'.$term->tid,
//					'#title' => t('Block image'),
//					'#size' => 40,
//					'#description' => t("Image should be less than 400 pixels wide and in JPG format."),
//					'#upload_location' => 'public://'
//				),
//				'comment_credit' => array(
//					'#type' => 'textarea',
//					'#name' => 'comment_credit'.$term->tid,
//					'#title' => t('Comment'),
//					'#value' => t('Comment'),
//				),
//				'submit' => array(
//					'#type' => 'submit',
//					'#name' => 'comment_credit'.$term->tid,
//					'#title' => t('Comment'),
//					'#value' => t('Comment'),
//				),
//			);
//			$i++;
//
//		}


	} else {
		$form['None_found'] = array(
			'#markup' => 'No vocab was found',
		);
	}
//	dpm($form);
	return $form;
}

function ec_task_credits_forms($form_id, $args) {

	$forms['ec_task_credits_credit_form']['callback'] = 'ec_task_credits_credit_form_callback';
	return $forms;
}

function ec_task_credits_form_alter(&$form, &$form_state, $form_id) {
	dpm($form_id);
	if ($form_id == 'ol_todo_node_form') {
		if(isset($form['field_task_credits'])) {
			$form['field_task_credits']['#attributes']['class'][] = 'hide-field';
		}
	}

}
