<?php
//https://www.alloymagnetic.com/blog/192/angular-2-boilerplate-setup-small-drupal-7-applications

/** Implements hook_node_view().
 *
 **/
function ec_task_credits_node_view($node, $view_mode, $langcode) {
	if ($node->type == 'ol_todo') {
		if (isset($node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'])) {

			$path = drupal_get_path('module', 'ec_task_credits');
			drupal_add_css ("$path/css/task_credits.css");

			$output = theme('vocab_list', array(
				'task_nid' => $node->nid,
				'task_list_nid' => $node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'],
				)
			);
			//returns the output from preprocess_vocab_list
			$node->content['vocab_list_container'] = array(
				'#markup' => $output,
			);
		}

	}
	if ($node->type == 'task_credit') {
		dpm($node);
	}

}

function ec_task_credits_preprocess_field(&$variables) {

}

//<-- ANGULAR PROJECT -------------------------------------------------------<
function ec_task_credits_menu() {
	$items = [];
	$items['angular2'] = [
		'access callback' => TRUE,
		'page callback' => 'ec_task_credits_angular_callback',
	];
//	$items['test_credit_form'] = [
//		'access callback' => TRUE,
//		'page callback' => 'ec_task_credits_test_form_callback',
//	];


	return $items;
}

function ec_task_credits_angular_callback() {
	$build['content'] = [
		'#theme' => [
			'angular_component',
		],
	];
	return $build;
}

function ec_task_credits_theme($existing, $type, $theme, $path) {
	return [
		'angular_component' => [
			'template' => 'angular-component',
			'variables' => array(),
			'path' => drupal_get_path('module', 'ec_task_credits') . '/theme',
		],
		'vocab_list' => [
			'template' => 'vocab-list',
			'variables' => array(),
			'path' => drupal_get_path('module', 'ec_task_credits') . '/theme',
		],
	];
}

/**
 * Callback for the vocab_list template. Adds fields
 */
function ec_task_credits_preprocess_vocab_list(&$vars) {
	// Add vocabulary output to template file
	// build a form send it to the template file
	$task_list = node_load($vars['task_list_nid']);
	$node = node_load($vars['task_nid']);

	if ($task_list->title == 'Site Visits') {
		switch($node->title) {
			case 'Insulation':
				$vocab_insulation = taxonomy_vocabulary_machine_name_load('credit_list_insulation');
				$terms_insulation = entity_load('taxonomy_term', FALSE, array('vid' => $vocab_insulation->vid));
				$vars['terms'] = $terms_insulation;
				break;

			case 'Framing':
				$vocab_framing = taxonomy_vocabulary_machine_name_load('credit_list_framing');
				$terms_framing = entity_load('taxonomy_term', FALSE, array('vid' => $vocab_framing->vid));
				$vars['terms'] = $terms_framing;
				break;

			case 'Final + Blower Door':
				$vars['terms'] = '';
				break;
			default:
				 $vars['terms'] = '';
				break;

		}
		//build the term fields
		//for each term, create a $field and an accompanying browse control and textbox
		//then put that array inside a $form array and return the whole thing to the template
		$form = array();
		if (!empty($vars['terms'])) {
			$i=0;
			foreach ($vars['terms'] as $tid => $term){
				//arguments go to $form_state['build_info']['args']
				$vars['test_form'][] = drupal_get_form('ec_task_credits_credit_form', $term->tid, $term->name, $node->nid);
				$i++;
			}
			$vars['term_fields'] = $form;

		}


	}
}


function ec_task_credits_credit_form_validate($form, &$form_state) {
	//form_set_error('', t('Force this error for now'));
}

function ec_task_credits_credit_form_submit($form, &$form_state) {
	dpm($form_state);
	dpm('im the submit');

}

function ec_task_credits_credit_form($form, &$form_state, $term_id, $term_name, $task_node) {


	if (!empty($term_id)) {
		$form['#id'] = 'ec_task_credits_credit_form_'.$term_id;
		$form['#base'] = 'ec_task_credits_credit_form';

		$form['term_field'] = array(
			'#markup' => $term_name,
			'#tid' => $term_id,
		);

		$form['browse_credit'] = array(
			'#type' => 'managed_file',
			'#title' => t('Block image'),
			'#size' => 40,
			'#id' => 'browse_credit_'.$term_id,
			'#description' => t("Image should be less than 400 pixels wide and in JPG format."),
			'#upload_location' => 'public://'
		);
		$form['comment_credit'] = array(
			'#type' => 'textarea',
			'#id' => 'comment_credit_'.$term_id,
			'#title' => t('Comment'),
			'#attributes' => array(
				'placeholder' => t('Comment'),
			),
		);
		$form['submit'] = array(
			'#type' => 'submit',
			'#id' => 'submit_credit_'.$term_id,
			'#title' => t('Save'),
			'#value' => t('Save'),
			'#ajax' => array(
				'callback' => 'ec_task_credits_form_ajax_submit',
				'wrapper' => 'ec-task-credit-form-wrapper',
				'method' => 'replace',
				'effect' => 'fade',
			),
		);
	} else {
		$form['None_found'] = array(
			'#markup' => 'No vocab was found',
		);
	}
//	dpm($form);
	return $form;
}

/**
 * @param $form
 * @param $form_state
 * @return string
 */
function ec_task_credits_form_ajax_submit($form, &$form_state) {

	if(!empty($form_state['build_info']['args'])) {

		global $user;

		$tid = $form_state['build_info']['args'][0];
		$body= $form_state['build_info']['args'][1];
		$task_nid = $form_state['build_info']['args'][2];

		$title = 'task credit '.date("Y-m-d").'-'.$task_nid.'-'.$tid;

		$node_info = array(
			'title' => $title,
			'task_nid' => $task_nid,
			'tid' => $tid,
			'body' => $body,
			'poster' => $user->uid,
		);

		//create a new task credit node
		$new_credit_nid = ec_task_credits_add_new_node($node_info);

		//load the task node and reference to the new credit node from above
		$task_node = node_load($task_nid);

		if (isset($task_node->field_task_credits)) {
			$task_node->field_task_credits[LANGUAGE_NONE][]['target_id'] = $new_credit_nid;
		} else {
			drupal_set_message(t('Unable to set a reference to this credit on the task.'), 'error');
			watchdog('ec_task_credits', 'Error: field_task_credits is not set on the task node');
		}


	} else {
		drupal_set_message('Arguments were not passed to the ajax submit function');
		watchdog('ec_task_credits', 'Arguments were not properly passed to the ajax submit function.');
		return $form;
	}

//	if (!empty($form_state['input']['comment'])) {
//		return 'Subscribed !';
//	} else {
//		return $form;
//	}
//	if (isset($form_state['values']['browse_credit'])) {
//		$file = file_load($form_state['values']['custom_content_block_image']);
//		$file->status = FILE_STATUS_PERMANENT;
//		file_save($file);
//	}
//	return $form;
}

/*
 * hook_forms()
 */
function ec_task_credits_forms($form_id, $args) {

//	$forms['ec_task_credits_credit_form']['callback'] = 'ec_task_credits_credit_form_callback';
//	return $forms;

	// we can't declare a passed parameter, but we want one anyway
	$args = func_get_args();
	$form_id = $args[0][0];

	// base ids for dynamic forms go here
	$dynamic_forms = array(
		'ec_task_credits_credit_form',
		'my_module_beta_form',
	);
	$forms = array();
	foreach ($dynamic_forms as $dynform) {
//		dpm($dynform);
		if (strpos($form_id, $dynform) === 0) { // === is important! see doc on strpos
			$forms[$form_id] = array(
				'callback' => $dynform,
				// this get passed in before the rest of the args to drupal_get_form
				'callback arguments' => array('testarg'),
			);
		}
	}
	return $forms;
}

function ec_task_credits_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'ol_todo_node_form') {
		if(isset($form['field_task_credits'])) {
			//$form['field_task_credits']['#attributes']['class'][] = 'hide-field';
		}
	}

}

/**
 * Custom function that creates a new task credit node
 * @return The node id of the newly submitted task credit
 */
function ec_task_credits_add_new_node($node_info){
	$new_credit = null;
	$new_credit = new stdClass();
	$new_credit->title = $node_info['title'];
	$new_credit->body[LANGUAGE_NONE][0]['value'] = $node_info['body'];
	$new_credit->type = 'task_credits';
	$new_credit->language = LANGUAGE_NONE;
	node_object_prepare($new_credit);
	$new_credit->uid = $node_info['poster'];
	$new_credit->status = 1;
	$new_credit->promote = 0;
	$new_credit->comment = 0;
	$new_credit->path['pathauto'] = 1;
	$new_credit->field_task_credit_term_reference[LANGUAGE_NONE][0]['value'] = $node_info['tid'];

	node_submit($new_credit);
	node_save($new_credit);
	return $new_credit->nid;

	//watchdog('ec_app', 'Created new opportunity autotask from autotask nid '.$oatnode->nid);
}